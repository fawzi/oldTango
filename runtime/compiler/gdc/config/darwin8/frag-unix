extern(C) {

const int NFDBITS = 32;
const int __FD_SET_SIZEOF = 128;
const int FD_SETSIZE = 1024;
alias ushort mode_t;
alias int pid_t;
alias uint uid_t;
alias uint gid_t;
alias Clong_t ssize_t;

enum {
  DT_UNKNOWN = 0,
  DT_FIFO = 1,
  DT_CHR = 2,
  DT_DIR = 4,
  DT_BLK = 6,
  DT_REG = 8,
  DT_LNK = 10,
  DT_SOCK = 12,
  DT_WHT = 14,
}
enum {
  O_RDONLY = 0,
  O_WRONLY = 1,
  O_RDWR = 2,
  O_NONBLOCK = 4,
  O_CREAT = 512,
  O_EXCL = 2048,
  O_TRUNC = 1024,
  O_APPEND = 8,
  O_NOFOLLOW = 256,
}

enum {
  F_DUPFD = 0,
  F_GETFD = 1,
  F_SETFD = 2,
  F_GETFL = 3,
  F_SETFL = 4,
}

enum {
  F_OK = 0,
  R_OK = 4,
  W_OK = 2,
  X_OK = 1,
}

alias Clong_t time_t;
struct timespec {
    Clong_t tv_sec;
    Clong_t tv_nsec;
}

struct timeval {
    Clong_t tv_sec;
    int tv_usec;
}

struct timezone {
    int tz_minuteswest;
    int tz_dsttime;
}

static assert(timezone.tz_minuteswest.offsetof == 0);
static assert(timezone.tz_dsttime.offsetof == 4);
static assert(timezone.sizeof == 8);


struct utimbuf {
    Clong_t actime;
    Clong_t modtime;
}

enum {
  S_IFIFO = 4096,
  S_IFCHR = 8192,
  S_IFDIR = 16384,
  S_IFBLK = 24576,
  S_IFREG = 32768,
  S_IFLNK = 40960,
  S_IFSOCK = 49152,
  S_IFMT = 61440,
  S_IRUSR = 256,
  S_IWUSR = 128,
  S_IXUSR = 64,
  S_IRGRP = 32,
  S_IWGRP = 16,
  S_IXGRP = 8,
  S_IROTH = 4,
  S_IWOTH = 2,
  S_IXOTH = 1,
  S_IRWXG = 56,
  S_IRWXO = 7,
}

struct struct_stat {
    int st_dev;
    uint st_ino;
    ushort st_mode;
    ushort st_nlink;
    uint st_uid;
    uint st_gid;
    int st_rdev;
    time_t st_atime;
    time_t ___pad1;
    time_t st_mtime;
    time_t ___pad2;
    time_t st_ctime;
    time_t ___pad3;
    off_t  st_size;
    long st_blocks;
    int st_blksize;
   ubyte[28] ___pad4;
}

// from <sys/signal.h>
enum {
  SIGHUP = 1,
  SIGINT = 2,
  SIGQUIT = 3,
  SIGILL = 4,
  SIGABRT = 6,
  SIGIOT = 6,
  SIGBUS = 10,
  SIGFPE = 8,
  SIGKILL = 9,
  SIGUSR1 = 30,
  SIGSEGV = 11,
  SIGUSR2 = 31,
  SIGPIPE = 13,
  SIGALRM = 14,
  SIGTERM = 15,
  SIGSTKFLT = 0,
  SIGCHLD = 20,
  SIGCONT = 19,
  SIGSTOP = 17,
  SIGTSTP = 18,
  SIGTTIN = 21,
  SIGTTOU = 22,
  SIGIO = 23,
  SIGPOLL = 0,
  SIGPROF = 27,
  SIGWINCH = 28,
  SIGURG = 16,
  SIGXCPU = 24,
  SIGXFSZ = 25,
  SIGVTALRM = 26,
  SIGTRAP = 5,
  SIGPWR = 0,
  SIGSYS = 12,
}
enum {
  SA_NOCLDSTOP = 8,
  SA_NOCLDWAIT = 32,
  SA_SIGINFO = 64,
  SA_ONSTACK = 1,
  SA_RESTART = 2,
  SA_NODEFER = 16,
  SA_RESETHAND = 4,
}

struct sigset_t { ubyte[4] opaque; }
alias  void function(int) __sighandler_t;
const __sighandler_t SIG_DFL = cast(__sighandler_t) 0;
const __sighandler_t SIG_IGN = cast(__sighandler_t) 1;
const __sighandler_t SIG_ERR = cast(__sighandler_t) -1;

/* siginfo_t is not finished... see gen_unix.c */
struct siginfo_t {
    int si_signo;
    int si_errno;
    int si_code;
    static if (size_t.sizeof == 4)
   ubyte[52] ___pad1;
    else
       ubyte[92] ___pad1;
}

struct sigaction_t {
    union {
        void function(int) sa_handler;
        void function(int, siginfo_t *, void *) sa_sigaction;
    }
    sigset_t sa_mask;
    int sa_flags;
}


// from <sys/mman.h>
extern(D) const void * MAP_FAILED = cast(void *) -1;
enum { PROT_NONE = 0, PROT_READ = 1, PROT_WRITE = 2, PROT_EXEC = 4 }
enum { MAP_SHARED = 0x1, MAP_PRIVATE = 0x2, MAP_ANON = 0x1000,       MAP_ANONYMOUS = 0x1000,  MAP_FIXED = 16,
  MAP_FILE = 0,
  MAP_NORESERVE = 64,
}

enum {
  MS_ASYNC = 1,
  MS_INVALIDATE = 2,
  MS_SYNC = 16,
}

enum {
  MCL_CURRENT = 1,
  MCL_FUTURE = 2,
}

enum {
  MADV_NORMAL = 0,
  MADV_RANDOM = 1,
  MADV_SEQUENTIAL = 2,
  MADV_WILLNEED = 3,
  MADV_DONTNEED = 4,
}


enum {
  EPERM = 1,
  ENOENT = 2,
  ESRCH = 3,
  EINTR = 4,
  ENXIO = 6,
  E2BIG = 7,
  ENOEXEC = 8,
  EBADF = 9,
  ECHILD = 10,
  EINPROGRESS = 36,
  EWOULDBLOCK = 35,
  EAGAIN = 35,
}

alias int sem_t;
alias Culong_t pthread_t;
static if (size_t.sizeof == 4)
{
struct pthread_attr_t { ubyte[40] opaque; }
struct pthread_cond_t { ubyte[28] opaque; }
struct pthread_condattr_t { ubyte[8] opaque; }
struct pthread_mutex_t { ubyte[44] opaque; }
struct pthread_mutexattr_t { ubyte[12] opaque; }
}
else
{
    struct pthread_attr_t { ubyte[64] opaque; }
    struct pthread_cond_t { ubyte[48] opaque; }
    struct pthread_condattr_t { ubyte[16] opaque; }
    struct pthread_mutex_t { ubyte[64] opaque; }
    struct pthread_mutexattr_t { ubyte[16] opaque; }
}
struct sched_param {
    int sched_priority;
   ubyte[4] ___pad1;
}

static assert(sched_param.sched_priority.offsetof == 0);
static assert(sched_param.sizeof == 8);


struct pthread_barrier_t;
struct pthread_barrierattr_t;
struct pthread_rwlock_t { ubyte[128] opaque; }
struct pthread_rwlockattr_t { ubyte[16] opaque; }
struct pthread_spinlock_t;

enum : int {
  PTHREAD_CANCEL_ENABLE = 1,
  PTHREAD_CANCEL_DISABLE = 0,
  PTHREAD_CANCEL_DEFERRED = 2,
  PTHREAD_CANCEL_ASYNCHRONOUS = 0,
}

alias Culong_t clockid_t;
alias uint socklen_t;
// from <sys/socket.h>
const int SOL_SOCKET = 65535

;enum : int {
  SO_DEBUG = 1,
  SO_ACCEPTCONN = 2,
  SO_REUSEADDR = 4,
  SO_KEEPALIVE = 8,
  SO_DONTROUTE = 16,
  SO_BROADCAST = 32,
  SO_USELOOPBACK = 64,
  SO_LINGER = 128,
  SO_OOBINLINE = 256,
  SO_REUSEPORT = 512,
  SO_TIMESTAMP = 1024,
  SO_SNDBUF = 4097,
  SO_RCVBUF = 4098,
  SO_SNDLOWAT = 4099,
  SO_RCVLOWAT = 4100,
  SO_SNDTIMEO = 4101,
  SO_RCVTIMEO = 4102,
  SO_ERROR = 4103,
  SO_TYPE = 4104,
}

struct linger {
    int l_onoff;
    int l_linger;
}

static assert(linger.l_onoff.offsetof == 0);
static assert(linger.l_linger.offsetof == 4);
static assert(linger.sizeof == 8);



enum : int {
  SOCK_STREAM = 1,
  SOCK_DGRAM = 2,
  SOCK_RAW = 3,
  SOCK_RDM = 4,
  SOCK_SEQPACKET = 5,
}

enum : int {
  MSG_OOB = 1,
  MSG_PEEK = 2,
  MSG_DONTROUTE = 4,
}

enum : int {
  AF_UNSPEC = 0,
  AF_UNIX = 1,
  AF_INET = 2,
  AF_IPX = 23,
  AF_APPLETALK = 16,
  AF_INET6 = 30,
  AF_BOGOSITY = 0,
}

enum : int {
  PF_UNSPEC = 0,
  PF_UNIX = 1,
  PF_INET = 2,
  PF_IPX = 23,
  PF_APPLETALK = 16,
}

// from <netinet/in.h>
enum : int {
  IPPROTO_IP = 0,
  IPPROTO_ICMP = 1,
  IPPROTO_IGMP = 2,
  IPPROTO_GGP = 3,
  IPPROTO_TCP = 6,
  IPPROTO_PUP = 12,
  IPPROTO_UDP = 17,
  IPPROTO_IDP = 22,
  IPPROTO_IPV6 = 41,
}

enum : uint {
  INADDR_ANY = 0x0,
  INADDR_LOOPBACK = 0x7f000001,
  INADDR_BROADCAST = 0xffffffff,
  INADDR_NONE = 0xffffffff,
  ADDR_ANY = 0,
}
// from <netinet/tcp.h>
enum : int {
  TCP_NODELAY = 1,
}

// from <netinet6/in6.h>
enum : int {
  IPV6_UNICAST_HOPS = 4,
  IPV6_MULTICAST_IF = 9,
  IPV6_MULTICAST_HOPS = 10,
  IPV6_MULTICAST_LOOP = 11,
  IPV6_JOIN_GROUP = 12,
  IPV6_LEAVE_GROUP = 13,
}

// from <netdb.h>
struct protoent {
    char * p_name;
    char ** p_aliases;
    int p_proto;
}

struct servent {
    char * s_name;
    char ** s_aliases;
    int s_port;
    char * s_proto;
}


struct hostent {
    char * h_name;
    char ** h_aliases;
    int h_addrtype;
    int h_length;
    char ** h_addr_list;
char* h_addr()
{
        return h_addr_list[0];
}
}

struct addrinfo { }
struct passwd {
    char * pw_name;
    char * pw_passwd;
    uint pw_uid;
    uint pw_gid;
    time_t pw_change;
    char * pw_class;
    char * pw_gecos;
    char * pw_dir;
    char * pw_shell;
    time_t pw_expire;
}

}

